查询数据库版本 mysql --version
以账户密码形式登录数据库  mysql -u 用户名 -p  (以该语句登录后，接下需要输入账户密码)
展示当前主机下所有的数据库  show DATABASE
使用指定名称的数据库  USE 数据库名称;

创建表   CREATE TABLE students (
    ->     id VARCHAR(10) PRIMARY KEY,
    ->     name VARCHAR(20) NOT NULL,
    ->     gender CHAR(1) CHECK (gender IN ('M', 'F')),
    ->     birth_date DATE,
    ->     department VARCHAR(50)
    -> );（->是换行的意思）

往 students表里面插入数据 
 INSERT INTO students VALUES
    -> ('S001', '张三', 'M', '2000-03-15', '计算机学院'),
    -> ('S002', '李四', 'F', '2001-06-20', '数学学院'),
    -> ('S003', '王五', 'M', '1999-12-01', '计算机学院'),
    -> ('S004', '赵六', 'F', '2000-08-10', '物理学院');

查询一张表里面的全部内容  SELECT * FROM students;
查询表，设置筛选条件  SELECT name, department FROM students WHERE gender = 'F';


联合查询并且设置条件筛选   联合students表和scores表中 students表的id和scores表中 student_id相同的字段 筛选课程是 数据库原理的数据条目 ，返回其名称和成绩
 SELECT s.name, sc.score
    -> FROM students s
    -> JOIN scores sc ON s.id = sc.student_id
    -> JOIN courses c ON sc.course_id = c.course_id
    -> WHERE c.course_name = '数据库原理';

对返回的数据进行操作 场景 取成绩平均值 AVG函数
SELECT c.course_name, AVG(sc.score) AS avg_score
FROM scores sc
JOIN courses c ON sc.course_id = c.course_id
GROUP BY c.course_id, c.course_name;

查询挂科学生的的成绩
SELECT s.name, c.course_name, sc.score
FROM scores sc
JOIN students s ON sc.student_id = s.id
JOIN courses c ON sc.course_id = c.course_id
WHERE sc.score < 60;

查询选择了数据库原理的学生
ELECT COUNT(*) AS student_count
FROM scores sc
JOIN courses c ON sc.course_id = c.course_id
WHERE c.course_name = '数据库原理';

查询总分
SELECT s.name, SUM(sc.score) AS total_score
FROM students s
JOIN scores sc ON s.id = sc.student_id
WHERE s.department = '计算机学院'
GROUP BY s.id, s.name;

更新指定学生的指定科目的成绩
PDATE scores
SET score = 90.0
WHERE student_id = 'S001' AND course_id = 'C001';

-- 先删成绩，再删学生（或使用 ON DELETE CASCADE）
DELETE FROM students WHERE id = 'S004';

进阶 

给数据库指定字段添加索引
CREATE INDEX idx_students_name ON students(name);

查询平均分高于 85 的课程名称
SELECT c.course_name
FROM scores sc
JOIN courses c ON sc.course_id = c.course_id
GROUP BY c.course_id, c.course_name
HAVING AVG(sc.score) > 85;

查询没有选修“数据结构”的学生姓名
SELECT name
FROM students
WHERE id NOT IN (
    SELECT student_id
    FROM scores
    WHERE course_id = 'C003'
);

给student 表添加email字段
ALTER TABLE students ADD COLUMN email VARCHAR(50);

将所有“计算机学院”学生的 email 设置为 xxx@cs.edu
UPDATE students
SET email = CONCAT(LOWER(name), '@cs.edu')
WHERE department = '计算机学院';

大部分数据库里面 进行字符串拼接是使用双 || 来拼接  + 是数学加法的操作



数据库创建用户 1.要使用root 账户创建
#创建语句
CREATE USER '用户名'@'主机' IDENTIFIED BY '密码'; 
参数说明：
    用户名：你想创建的用户名，例如 'dev_user'。
    主机：
    'localhost'：只允许该用户从本机（数据库服务器本身）连接。
    '%'：允许该用户从任何主机连接（最常见，但也更需注意安全）。
    '192.168.1.%'：允许从特定 IP 段连接。
    'specific_ip'：只允许从特定 IP 地址连接。

第二步 给用户赋予权限
    语句格式
    GRANT 权限类型 ON 数据库名.表名 TO '用户名'@'主机' [WITH GRANT OPTION];

    参数说明：
        权限类型 可以是单个权限或多个权限用逗号分隔
        数据库名称.表名 指定具体的数据库和表 可以用通配符 * 
        [WITH GRANT OPTION]  可选项，意思是是否允许用户把自己拥有的权限赋予给其他人


可以赋予的权限如下：
    ALL PRIVILEGES	拥有除 GRANT OPTION 外的所有权限（通常需要单独加 WITH GRANT OPTION 才能授权）。
    SELECT	允许读取数据。
    INSERT	允许插入新数据。
    UPDATE	允许修改现有数据。
    DELETE	允许删除数据。
    CREATE	允许创建新数据库或表。
    DROP	允许删除数据库或表。
    ALTER	允许修改表结构。
    INDEX	允许创建和删除索引。
    CREATE VIEW	允许创建视图。
    SHOW DATABASES	允许查看所有数据库列表。
    CREATE ROUTINE	允许创建存储过程和函数。
    ALTER ROUTINE	允许修改和删除存储过程和函数。
    EXECUTE	允许执行存储过程。
