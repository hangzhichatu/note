!MTRX!AD! program ImportNewCustoAttribute "3DEXPERIENCE R2016x HotFix 10(25.0.0.1)"
ImportNewCustoAttribute 0 "" "import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.matrixone.apps.domain.util.MapList;

import matrix.db.Context;
import matrix.db.JPO;

// public class ImportNewCustoAttribute {
public class ${CLASSNAME}{

	private static final String VAULT = \"eService Production\";
	private static final String TASKESTIMATEDURATION = \"1.0\";

	public static List<String[]> readExcel(File excelFile, int rowNum)
			throws IOException {
		List<String[]> list = new ArrayList<String[]>();
		XSSFWorkbook rwb = null;
		XSSFCell cell = null;

		InputStream stream = new FileInputStream(excelFile);
		rwb = new XSSFWorkbook(stream);
		XSSFSheet sheet = rwb.getSheetAt(0);
		for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) {
			XSSFRow row = sheet.getRow(i);
			String[] str = new String[row.getLastCellNum()];
			for (int j = 0; j < row.getLastCellNum(); j++) {
				cell = row.getCell(j);
				if (cell != null) {
					String str1 = getStringValueFromCell(cell);
					str[j] = str1;
				}
			}
			list.add(str);
		}
		return list;
	}

	public MapList ImportExcel(Context context, String[] args) {
		System.out.println(\"ImportExcel-------->\");
		HashMap programMap;
		String objectId;
		String excelFileName;
		MapList returnMapList = new MapList();
		try {
			programMap = (HashMap) JPO.unpackArgs(args);
			objectId = (String) programMap.get(\"objectId\");
			excelFileName = (String) programMap.get(\"relFilePath\");
			System.out.println(\"excelFileName======\" + excelFileName);
			List<String[]> alist = readExcel(new File(excelFileName), 1);
			for (int n = 1; n < alist.size(); n++) {
				String[] str = (String[]) alist.get(n);
				String name = str[1];
				if (name.getBytes().length > 120) {
					return null;
				}
			}
			List<String[]> list = readExcel(new File(excelFileName), 1);
			returnMapList = parseExcel(context, objectId, list);

		} catch (Exception e) {
			returnMapList = null;
			e.printStackTrace();
		}

		return returnMapList;
	}

	public MapList parseExcel(Context context, String objectId,
			List<String[]> list) {
		MapList mapList = new MapList();
		try {
			for (int i = 1; i < list.size(); i++) {
				Map map = new HashMap();
				String strName = \"\";
				String strType = \"\";
				String strUnit = \"\";
				String strRangeValues = \"\";
				String strDefaultValue = \"\";
				String[] str = (String[]) list.get(i);
				strName = str[2];
				strType = str[3];
				if (str.length > 4) {
					strUnit = str[4];
				}
				if (str.length > 5) {
					strRangeValues = str[5];
				}
				if (str.length > 6) {
					strDefaultValue = str[6];
				}
				map.put(\"name\", strName);
				map.put(\"type\", strType);
				map.put(\"unit\", strUnit);
				map.put(\"rangeValues\", strRangeValues);
				map.put(\"defaultValue\", strDefaultValue);
				mapList.add(map);
			}
		} catch (Exception e) {
			mapList = null;
			e.printStackTrace();
		} finally {
			return mapList;
		}
	}

	public static String getStringValueFromCell(XSSFCell cell) {
		// System.out.println(\"getStringValueFromCell\");
		SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\");
		DecimalFormat decimalFormat = new DecimalFormat(\"#.#\");
		String cellValue = \"\";
		if (cell == null) {
			return cellValue;
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {
			cellValue = cell.getStringCellValue();
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
			if (HSSFDateUtil.isCellDateFormatted(cell)) {
				double d = cell.getNumericCellValue();
				Date date = HSSFDateUtil.getJavaDate(d);
				cellValue = sFormat.format(date);
			} else {
				cellValue = decimalFormat.format((cell.getNumericCellValue()));
			}
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {
			cellValue = \"\";
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {
			cellValue = String.valueOf(cell.getBooleanCellValue());
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {
			cellValue = \"\";
		} else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) {
			cellValue = cell.getCellFormula().toString();
		}
		// System.out.println(\"cellValue : \" + cellValue);
		return cellValue;
	}

}" 0 0 0 0 0 0 0 0 0 1 0 0 "" 0 0
 0 0
"6/3/2019 5:25:47 PM" "6/13/2019 11:33:43 AM"
14
 1 1 "6/3/2019 5:25:47 PM" creator "  add program ImportNewCustoAttribute java execute immediate code 'import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public String ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; String returnStr = \"OK\"; try { programMap = (HashMap) JPO.unpackArgs(args);  objectId = (String) programMap.get(\"objectId\"); System.out.println(\"objectId-------->\" + objectId); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName-------->\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return \"length\"; } } List<String[]> list = readExcel(new File(excelFileName), 1);  returnStr = parseExcel(context, objectId, list);  } catch (Exception e) { returnStr = \"\"; e.printStackTrace(); }  return returnStr; }  public String parseExcel(Context context, String objectId, List<String[]> list) { String returnStr = \"OK\"; String strName = \"\"; String strType = \"\"; try { for (int i = 1; i < list.size(); i++) { String[] str = (String[]) list.get(i); strName = str[1]; System.out.println(\"strName::::\" + strName); strType = str[2]; System.out.println(\"strType::::\" + strType);  } } catch (Exception e) { returnStr = \"ERROR\"; e.printStackTrace(); } finally { return returnStr; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" + cellValue); return cellValue; }  }';"
 2 2 "6/3/2019 5:46:23 PM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFileName\"); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; System.out.println(\"strName::::\" + strName); strType = str[2]; System.out.println(\"strType::::\" + strType); map.put(\"name\", strName); map.put(\"type\", strType); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" + cellValue); return cellValue; }  }\";"
 3 2 "6/3/2019 6:06:43 PM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFileName\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; System.out.println(\"strName::::\" + strName); strType = str[2]; System.out.println(\"strType::::\" + strType); map.put(\"name\", strName); map.put(\"type\", strType); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" + cellValue); return cell"
 4 2 "6/3/2019 6:11:32 PM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; System.out.println(\"strName::::\" + strName); strType = str[2]; System.out.println(\"strType::::\" + strType); map.put(\"name\", strName); map.put(\"type\", strType); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" + cellValue); return cell"
 5 2 "6/3/2019 6:13:05 PM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; strType = str[2]; map.put(\"name\", strName); map.put(\"type\", strType); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" + cellValue); return cellValue; }  }\";"
 6 2 "6/4/2019 11:02:18 AM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; String strRangeValues = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; strType = str[2]; if(str.length>3) { strRangeValues = str[3]; } map.put(\"name\", strName); map.put(\"type\", strType); map.put(\"rangeValues\", strRangeValues); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_FORMULA) { cellValue = cell.getCellFormula().toString(); } // System.out.println(\"cellValue : \" +"
 7 2 "6/4/2019 11:03:52 AM" creator "  modify program ImportNewCustoAttribute !pipe;"
 8 2 "6/4/2019 11:09:51 AM" creator "  modify program ImportNewCustoAttribute !pipe;"
 9 2 "6/4/2019 11:16:53 AM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; String strRangeValues = \"\"; String strDefaultValue = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[1]; strType = str[2]; if(str.length>3) { strRangeValues = str[3]; } if(str.length>4) { strDefaultValue = str[4]; } map.put(\"name\", strName); map.put(\"type\", strType); map.put(\"rangeValues\", strRangeValues); map.put(\"defaultValue\", strDefaultValue); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) { cellValue = \"\"; } else if (cell.getCellType() ="
 10 2 "6/4/2019 11:18:57 AM" creator "  modify program ImportNewCustoAttribute !pipe;"
 11 2 "6/11/2019 10:43:49 AM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; String strUnit = \"\"; // String strRangeValues = \"\"; // String strDefaultValue = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[0]; strType = str[1]; if (str.length > 2) { strUnit = str[2]; } /* * if(str.length>3) { strRangeValues = str[3]; } * if(str.length>4) { strDefaultValue = str[4]; } * map.put(\"rangeValues\", strRangeValues); * map.put(\"defaultValue\", strDefaultValue); */ map.put(\"name\", strName); map.put(\"type\", strType); map.put(\"unit\", strUnit); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue());"
 12 2 "6/11/2019 10:48:11 AM" creator "  modify program ImportNewCustoAttribute !pipe;"
 13 2 "6/13/2019 10:43:50 AM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); String strName = \"\"; String strType = \"\"; String strUnit = \"\"; String strRangeValues = \"\"; String strDefaultValue = \"\"; try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String[] str = (String[]) list.get(i); strName = str[2]; strType = str[3]; if (str.length > 4) { strUnit = str[4]; } if (str.length > 5) { strRangeValues = str[5]; } if (str.length > 6) { strDefaultValue = str[6]; } map.put(\"name\", strName); map.put(\"type\", strType); map.put(\"unit\", strUnit); map.put(\"rangeValues\", strRangeValues); map.put(\"defaultValue\", strDefaultValue); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (ce"
 14 2 "6/13/2019 11:33:37 AM" creator "  modify program ImportNewCustoAttribute !pipe code \"import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.text.DecimalFormat; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map;  import org.apache.poi.hssf.usermodel.HSSFDateUtil; import org.apache.poi.xssf.usermodel.XSSFCell; import org.apache.poi.xssf.usermodel.XSSFRow; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  import com.matrixone.apps.domain.util.MapList;  import matrix.db.Context; import matrix.db.JPO;  // public class ImportNewCustoAttribute { public class ${CLASSNAME}{  private static final String VAULT = \"eService Production\"; private static final String TASKESTIMATEDURATION = \"1.0\";  public static List<String[]> readExcel(File excelFile, int rowNum) throws IOException { List<String[]> list = new ArrayList<String[]>(); XSSFWorkbook rwb = null; XSSFCell cell = null;  InputStream stream = new FileInputStream(excelFile); rwb = new XSSFWorkbook(stream); XSSFSheet sheet = rwb.getSheetAt(0); for (int i = rowNum - 1; i <= sheet.getLastRowNum(); i++) { XSSFRow row = sheet.getRow(i); String[] str = new String[row.getLastCellNum()]; for (int j = 0; j < row.getLastCellNum(); j++) { cell = row.getCell(j); if (cell != null) { String str1 = getStringValueFromCell(cell); str[j] = str1; } } list.add(str); } return list; }  public MapList ImportExcel(Context context, String[] args) { System.out.println(\"ImportExcel-------->\"); HashMap programMap; String objectId; String excelFileName; MapList returnMapList = new MapList(); try { programMap = (HashMap) JPO.unpackArgs(args); objectId = (String) programMap.get(\"objectId\"); excelFileName = (String) programMap.get(\"relFilePath\"); System.out.println(\"excelFileName======\" + excelFileName); List<String[]> alist = readExcel(new File(excelFileName), 1); for (int n = 1; n < alist.size(); n++) { String[] str = (String[]) alist.get(n); String name = str[1]; if (name.getBytes().length > 120) { return null; } } List<String[]> list = readExcel(new File(excelFileName), 1); returnMapList = parseExcel(context, objectId, list);  } catch (Exception e) { returnMapList = null; }  return returnMapList; }  public MapList parseExcel(Context context, String objectId, List<String[]> list) { MapList mapList = new MapList(); try { for (int i = 1; i < list.size(); i++) { Map map = new HashMap(); String strName = \"\"; String strType = \"\"; String strUnit = \"\"; String strRangeValues = \"\"; String strDefaultValue = \"\"; String[] str = (String[]) list.get(i); strName = str[2]; strType = str[3]; if (str.length > 4) { strUnit = str[4]; } if (str.length > 5) { strRangeValues = str[5]; } if (str.length > 6) { strDefaultValue = str[6]; } map.put(\"name\", strName); map.put(\"type\", strType); map.put(\"unit\", strUnit); map.put(\"rangeValues\", strRangeValues); map.put(\"defaultValue\", strDefaultValue); } } catch (Exception e) { mapList = null; } finally { return mapList; } }  public static String getStringValueFromCell(XSSFCell cell) { // System.out.println(\"getStringValueFromCell\"); SimpleDateFormat sFormat = new SimpleDateFormat(\"MM/dd/yyyy\"); DecimalFormat decimalFormat = new DecimalFormat(\"#.#\"); String cellValue = \"\"; if (cell == null) { return cellValue; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) { cellValue = cell.getStringCellValue(); } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) { if (HSSFDateUtil.isCellDateFormatted(cell)) { double d = cell.getNumericCellValue(); Date date = HSSFDateUtil.getJavaDate(d); cellValue = sFormat.format(date); } else { cellValue = decimalFormat.format((cell.getNumericCellValue())); } } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) { cellValue = \"\"; } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) { cellValue = String.valueOf(cell.getBooleanCellValue()); } else if (ce"

!MTRX!END

